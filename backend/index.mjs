import express from 'express';
import cors from 'cors';
import axios from 'axios';
import dotenv from 'dotenv';
import { create } from 'ipfs-http-client';
import crypto from 'crypto';
import Web3 from 'web3';

dotenv.config({ path: '../.env' });

const ipfsClient = create({ host: 'ipfs.infura.io', port: '5001', protocol: 'https' });
const imageMap = new Map();

const app = express();

app.use(cors());
app.use(express.json());

const API_KEY = process.env.OPENAI_API_KEY;
const ownerPrivateKey = process.env.OWNER_PRIVATE_KEY; // Set this in your .env file
const CONTRACT_ADDRESS = '0x5FbDB2315678afecb367f032d93F642f64180aa3'; // Replace with your actual contract address

const web3 = new Web3(process.env.INFURA_RPC_URL); // Set this in your .env file, it should look like `https://mainnet.infura.io/v3/YOUR-PROJECT-ID`

app.post('/generate-images', async (req, res) => {
  const { setting, verb } = req.body;
  console.log(`Photograph of a ${setting} ${verb}`);

  const prompt = `Create an image of a ${setting} scene with a ${verb} action`;

  try {
    const response = await axios.post(
      'https://api.openai.com/v1/images/generations',
      {
        model: 'image-alpha-001',
        size: '512x512',
        prompt,
        n: 1,
      },
      {
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${API_KEY}`,
        },
      }
    );

    const images = response.data.data.map((image) => {
      const id = crypto.createHash('sha256').update(image.url).digest('hex');
      imageMap.set(id, image.url);
      return { id, url: image.url };
    });

    console.log('Generated images:', images);

    res.json(images);
  } catch (error) {
    console.error('Error generating images:', error);
  }
});

app.post('/api/mint', async (req, res) => {
  const { imageId, account, contractABI } = req.body;

  const imageUrl = imageMap.get(imageId);
  if (!imageUrl) {
    return res.status(400).json({ error: 'Invalid image ID' });
  }

  try {
    const imageResponse = await axios.get(imageUrl, { responseType: 'arraybuffer' });
    const imageBuffer = Buffer.from(imageResponse.data);
    const imageResult = await ipfsClient.add(imageBuffer);

    const imageCID = imageResult.path;
    const ipfsImageUrl = `https://ipfs.io/ipfs/${imageCID}`;

    const metadata = {
      name: 'AI Generated Image',
      description: 'An image generated by AI',
      image: ipfsImageUrl,
    };

    const metadataBuffer = Buffer.from(JSON.stringify(metadata));
    const metadataResult = await ipfsClient.add(metadataBuffer);

    const metadataCID = metadataResult.path;
    const ipfsMetadataUrl = `https://ipfs.io/ipfs/${metadataCID}`;

    const contractInstance = new web3.eth.Contract(contractABI, CONTRACT_ADDRESS);

    const nonce = await contractInstance.methods.getNonce().call();
    const messageHash = web3.utils.soliditySha3(
      account, ipfsMetadataUrl, nonce, CONTRACT_ADDRESS
    );
    const signature = await web3.eth.accounts.sign(messageHash, ownerPrivateKey);

    res.json({
      metadataUrl: ipfsMetadataUrl,
      signature: signature.signature,
      nonce: nonce,
      messageHash: messageHash,
    });
    
  } catch (error) {
    console.error('Error minting NFT:', error);
    res.status(500).json({ error: 'Error minting NFT' });
    }
    });
    
    const PORT = process.env.PORT || 3001;
    app.listen(PORT, () => {
    console.log('Server listening on port ${PORT}');
    });